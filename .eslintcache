[{"/home/novvea/GitHub/aterwinwin/client/src/index.tsx":"1","/home/novvea/GitHub/aterwinwin/client/src/reportWebVitals.ts":"2","/home/novvea/GitHub/aterwinwin/client/src/App.tsx":"3","/home/novvea/GitHub/aterwinwin/client/src/routes/Routes.tsx":"4","/home/novvea/GitHub/aterwinwin/client/src/shared/provider/UserProvider.tsx":"5","/home/novvea/GitHub/aterwinwin/client/src/shared/provider/CardProvider.tsx":"6","/home/novvea/GitHub/aterwinwin/client/src/components/navigation/Navigation.tsx":"7","/home/novvea/GitHub/aterwinwin/client/src/routes/RoutingPath.ts":"8","/home/novvea/GitHub/aterwinwin/client/src/components/navigation/desktopnavigation/DesktopNavigation.tsx":"9","/home/novvea/GitHub/aterwinwin/client/src/hooks/useWindowDimensions.tsx":"10","/home/novvea/GitHub/aterwinwin/client/src/components/navigation/mobilenavigation/MobileNavigation.tsx":"11","/home/novvea/GitHub/aterwinwin/client/src/view/signup/SignUpView.tsx":"12","/home/novvea/GitHub/aterwinwin/client/src/view/authenticateduserviews/settingsview/SettingsView.tsx":"13","/home/novvea/GitHub/aterwinwin/client/src/view/home/HomeView.tsx":"14","/home/novvea/GitHub/aterwinwin/client/src/view/about/AboutView.tsx":"15","/home/novvea/GitHub/aterwinwin/client/src/view/categories/CategoriesView.tsx":"16","/home/novvea/GitHub/aterwinwin/client/src/view/login/LogInView.tsx":"17","/home/novvea/GitHub/aterwinwin/client/src/view/authenticateduserviews/myprofileview/MyProfileView.tsx":"18","/home/novvea/GitHub/aterwinwin/client/src/components/profile/Profile.tsx":"19","/home/novvea/GitHub/aterwinwin/client/src/components/navigation/mobilenavigation/sidebar/SideBar.tsx":"20","/home/novvea/GitHub/aterwinwin/client/src/components/search/Search.tsx":"21","/home/novvea/GitHub/aterwinwin/client/src/components/productcards/ProductCards.tsx":"22","/home/novvea/GitHub/aterwinwin/client/src/components/backdrop/BackDrop.tsx":"23","/home/novvea/GitHub/aterwinwin/client/src/components/navigation/mobilenavigation/hamburgerbutton/HamburgerButton.tsx":"24","/home/novvea/GitHub/aterwinwin/client/src/components/profile/profiledropdown/ProfileDropDown.tsx":"25","/home/novvea/GitHub/aterwinwin/client/src/shared/api/service/BackendAPIService.ts":"26","/home/novvea/GitHub/aterwinwin/client/src/shared/api/BackendAPI.ts":"27"},{"size":478,"mtime":1614785500243,"results":"28","hashOfConfig":"29"},{"size":425,"mtime":1614785500248,"results":"30","hashOfConfig":"29"},{"size":468,"mtime":1614785500199,"results":"31","hashOfConfig":"29"},{"size":2044,"mtime":1614785500250,"results":"32","hashOfConfig":"29"},{"size":417,"mtime":1614785500271,"results":"33","hashOfConfig":"29"},{"size":518,"mtime":1614785500269,"results":"34","hashOfConfig":"29"},{"size":772,"mtime":1614785500207,"results":"35","hashOfConfig":"29"},{"size":423,"mtime":1614785500251,"results":"36","hashOfConfig":"29"},{"size":1005,"mtime":1614785500211,"results":"37","hashOfConfig":"29"},{"size":551,"mtime":1614785500241,"results":"38","hashOfConfig":"29"},{"size":958,"mtime":1614785500215,"results":"39","hashOfConfig":"29"},{"size":1441,"mtime":1615386549599,"results":"40","hashOfConfig":"29"},{"size":153,"mtime":1614785500283,"results":"41","hashOfConfig":"29"},{"size":1384,"mtime":1614785500291,"results":"42","hashOfConfig":"29"},{"size":150,"mtime":1614785500274,"results":"43","hashOfConfig":"29"},{"size":387,"mtime":1614785500287,"results":"44","hashOfConfig":"29"},{"size":1701,"mtime":1614785500293,"results":"45","hashOfConfig":"29"},{"size":1035,"mtime":1614785500280,"results":"46","hashOfConfig":"29"},{"size":597,"mtime":1614785500232,"results":"47","hashOfConfig":"29"},{"size":699,"mtime":1614785500223,"results":"48","hashOfConfig":"29"},{"size":210,"mtime":1614785500239,"results":"49","hashOfConfig":"29"},{"size":1694,"mtime":1614785500227,"results":"50","hashOfConfig":"29"},{"size":200,"mtime":1614785500204,"results":"51","hashOfConfig":"29"},{"size":403,"mtime":1614785500218,"results":"52","hashOfConfig":"29"},{"size":793,"mtime":1614785500235,"results":"53","hashOfConfig":"29"},{"size":283,"mtime":1615384258669,"results":"54","hashOfConfig":"29"},{"size":236,"mtime":1615298193541,"results":"55","hashOfConfig":"29"},{"filePath":"56","messages":"57","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"58"},"1a3dezs",{"filePath":"59","messages":"60","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"58"},{"filePath":"61","messages":"62","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"58"},{"filePath":"63","messages":"64","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"65","usedDeprecatedRules":"58"},{"filePath":"66","messages":"67","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"68","usedDeprecatedRules":"58"},{"filePath":"69","messages":"70","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"71","usedDeprecatedRules":"58"},{"filePath":"72","messages":"73","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"58"},{"filePath":"74","messages":"75","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"58"},{"filePath":"76","messages":"77","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"78","usedDeprecatedRules":"58"},{"filePath":"79","messages":"80","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"58"},{"filePath":"81","messages":"82","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"83","usedDeprecatedRules":"58"},{"filePath":"84","messages":"85","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"86","messages":"87","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"58"},{"filePath":"88","messages":"89","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"90","usedDeprecatedRules":"58"},{"filePath":"91","messages":"92","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"58"},{"filePath":"93","messages":"94","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"58"},{"filePath":"95","messages":"96","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"97","usedDeprecatedRules":"58"},{"filePath":"98","messages":"99","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"100","usedDeprecatedRules":"58"},{"filePath":"101","messages":"102","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"58"},{"filePath":"103","messages":"104","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"58"},{"filePath":"105","messages":"106","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"58"},{"filePath":"107","messages":"108","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"109","usedDeprecatedRules":"58"},{"filePath":"110","messages":"111","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"58"},{"filePath":"112","messages":"113","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"58"},{"filePath":"114","messages":"115","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"116","usedDeprecatedRules":"58"},{"filePath":"117","messages":"118","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"119","messages":"120","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"/home/novvea/GitHub/aterwinwin/client/src/index.tsx",[],["121","122"],"/home/novvea/GitHub/aterwinwin/client/src/reportWebVitals.ts",[],"/home/novvea/GitHub/aterwinwin/client/src/App.tsx",[],"/home/novvea/GitHub/aterwinwin/client/src/routes/Routes.tsx",["123"],"import { BrowserRouter, Switch, Route } from \"react-router-dom\";\nimport { AboutView } from \"../view/about/AboutView\";\nimport { HomeView } from \"../view/home/HomeView\";\nimport { CategoriesView } from \"../view/categories/CategoriesView\";\nimport { LogInView } from \"../view/login/LogInView\";\nimport { SignUpView } from \"../view/signup/SignUpView\";\nimport { SettingsView } from '../view/authenticateduserviews/settingsview/SettingsView'\nimport { MyProfileView } from '../view/authenticateduserviews/myprofileview/MyProfileView'\nimport RoutingPath from \"./RoutingPath\";\nimport { UserContext } from \"../shared/provider/UserProvider\";\nimport { useEffect, useContext } from \"react\";\n\nexport const Routes = (props: { children: React.ReactChild }) => {\n  const [authUserContext, setAuthUserContext] = useContext(UserContext);\n  const { children } = props;\n\n  console.log('authUserContext:', authUserContext)\n\n  const changeRoute = (goToView: React.FC, blockView: React.FC) => {\n    return !authUserContext ? goToView : blockView\n  }\n  useEffect(() => {\n    if (localStorage.getItem(\"user\")) {\n      setAuthUserContext({ username: localStorage.getItem(\"user\") });\n    }\n  }, []);\n\n  return (\n    <BrowserRouter>\n      {children}\n      <Switch>\n        <Route exact path={RoutingPath.homeView} component={HomeView} />\n        <Route exact path={RoutingPath.aboutView} component={AboutView} />\n        <Route exact path={RoutingPath.categoriesView} component={CategoriesView} />\n        <Route exact path={RoutingPath.logInView} component={changeRoute(LogInView, HomeView)} />\n        <Route exact path={RoutingPath.signUpView} component={SignUpView} />\n        <Route exact path={RoutingPath.settingsView} component={changeRoute(SignUpView, SettingsView)} />\n        <Route exact path={RoutingPath.myProfileView} component={changeRoute(SignUpView, MyProfileView)} />\n        <Route component={HomeView} />{\" \"}\n        {/* Om vi vill att homeView är den första sidan vi kommer till och om något blir fel */}\n      </Switch>\n    </BrowserRouter>\n  );\n};\n","/home/novvea/GitHub/aterwinwin/client/src/shared/provider/UserProvider.tsx",["124"],"import { useState, createContext, ReactChild } from \"react\";\n\nexport const UserContext = createContext<any>(null);\n\nexport const UserProvider = (props: { children: React.ReactChild }) => {\n  const [authUserContext, setAuthUserContext] = useState();\n  const { children } = props;\n\n  return (\n    <UserContext.Provider value={[authUserContext, setAuthUserContext]}>\n      {children}\n    </UserContext.Provider>\n  );\n};\n","/home/novvea/GitHub/aterwinwin/client/src/shared/provider/CardProvider.tsx",["125"],"import { useState, createContext, ReactChild } from 'react'\n\nexport const CardContext = createContext<any>(null)\n\nexport const CardProvider = (props: {children: React.ReactChild}) => {\n  const [indexContext, setIndexContext] = useState(0)\n  const [likedPicturesContext, setLikedPicturesContext] = useState([])\n  const { children } = props;\n\n  return (\n    <CardContext.Provider value={{indexContext, setIndexContext, likedPicturesContext, setLikedPicturesContext}} >\n      {children}\n    </CardContext.Provider>\n  )\n}\n","/home/novvea/GitHub/aterwinwin/client/src/components/navigation/Navigation.tsx",[],"/home/novvea/GitHub/aterwinwin/client/src/routes/RoutingPath.ts",[],"/home/novvea/GitHub/aterwinwin/client/src/components/navigation/desktopnavigation/DesktopNavigation.tsx",["126","127"],"import \"./DesktopNavigation.css\";\nimport { useHistory, Link } from \"react-router-dom\";\n import { useContext } from \"react\";\nimport RoutingPath from \"../../../routes/RoutingPath\";\nimport { UserContext } from \"../../../shared/provider/UserProvider\";\nimport { Profile } from \"../../profile/Profile\";\n\n\nexport const DesktopNavigation = () => {\n  const history =useHistory()\n  const [authUserContext, setAuthUserContext] = useContext(UserContext);\n\n  const displayNavigationOrUsername = () => {\n    return authUserContext ? \n      <div className=\"profile\" >\n        <Profile />\n      </div>\n     : \n     <div className=\"desktopNavigationTabWrapper\"> \n      <Link to={RoutingPath.signUpView}>\n        Gå med\n      </Link>\n        <span> eller </span>     \n      <Link to={RoutingPath.logInView}>\n        logga in\n      </Link>\n        <span> eller </span>\n      <Link to={RoutingPath.aboutView}>\n        få veta hur det fungerar.\n      </Link>\n    </div>\n    ;\n  };\n\n  return displayNavigationOrUsername()\n};\n","/home/novvea/GitHub/aterwinwin/client/src/hooks/useWindowDimensions.tsx",[],"/home/novvea/GitHub/aterwinwin/client/src/components/navigation/mobilenavigation/MobileNavigation.tsx",["128"],"import \"./MobileNavigation.css\";\nimport { useState, useContext } from 'react'\nimport { HamburgerButton } from './hamburgerbutton/HamburgerButton'\nimport { SideBar } from './sidebar/SideBar'\nimport { BackDrop } from '../../backdrop/BackDrop'\nimport { Profile } from '../../profile/Profile'\nimport { UserContext } from '../../../shared/provider/UserProvider'\n\n\nexport const MobileNavigation = () => {\n  const [openSideBar, setOpenSideBar] = useState<boolean>(false)\n  const [authUserContext, setAuthUserContext] = useContext(UserContext);\n\n  const displayNavigationOrUsername = () => {\n    return authUserContext ? \n      <div className=\"profile\" >\n        <Profile />\n      </div>\n     : \n     <>\n    <HamburgerButton sideBarHandler={setOpenSideBar}/>\n    <SideBar sideBarIsOpen={openSideBar} sideBarHandler={setOpenSideBar}/>\n    {!openSideBar || <BackDrop sideBarHandler={setOpenSideBar}/>}\n    </>\n    }\n\n    return displayNavigationOrUsername()\n    };\n\n\n\n","/home/novvea/GitHub/aterwinwin/client/src/view/signup/SignUpView.tsx",[],"/home/novvea/GitHub/aterwinwin/client/src/view/authenticateduserviews/settingsview/SettingsView.tsx",[],"/home/novvea/GitHub/aterwinwin/client/src/view/home/HomeView.tsx",["129"],"import { useEffect, useContext } from \"react\";\nimport { Link } from 'react-router-dom'\nimport './HomeView.css'\nimport { ProductCards } from '../../components/productcards/ProductCards'\nimport { Search } from '../../components/search/Search'\nimport RoutingPath from '../../routes/RoutingPath'\nimport { UserContext } from '../../shared/provider/UserProvider'\n\nexport const HomeView = () => {\n  const [authUserContext] = useContext(UserContext);\n\n/*   const displayUsernameIfAuthenticated = () => {\n    return authUserContext ? <h1>Välkommen till hemvyn {authUserContext.username}</h1> : <h1>Välkommen till hemvyn </h1>\n  } */\n\n  useEffect(() => {\n ; /* det första som sker när komponenten laddas in */\n    return () => {\n      /* det sista som sker när komponeneten avlägsnas*/\n    };\n  }, []); /* när det värdet vi sätter in i input uppdateras så körs hela useEffect om */\n\n  return (\n    <div className='homeViewWrapper'>\n     {/*  {displayUsernameIfAuthenticated()} */}\n      <div className='homeViewCategoriesWrapper'>\n        <Link to={RoutingPath.categoriesView}>Kategorier</Link>\n      </div>\n      <div className='homeViewSearchWrapper'>\n        <Search/>\n      </div>\n      <div className='homeViewProductCardsWrapper'>\n        <ProductCards/> \n        <Link to={RoutingPath.myProfileView}>Hitta mina gillade produkter här...</Link>\n      </div>\n    </div>\n  );\n};\n","/home/novvea/GitHub/aterwinwin/client/src/view/about/AboutView.tsx",[],"/home/novvea/GitHub/aterwinwin/client/src/view/categories/CategoriesView.tsx",[],"/home/novvea/GitHub/aterwinwin/client/src/view/login/LogInView.tsx",["130"],"import { useState, useContext } from \"react\";\nimport { i_loginCredentials } from \"../../shared/interface/Interface\";\nimport { useHistory } from \"react-router-dom\";\nimport RoutingPath from \"../../routes/RoutingPath\";\nimport { UserContext } from \"../../shared/provider/UserProvider\";\n\nexport const LogInView = () => {\n  const history = useHistory();\n  const [loginCredentials, setLoginCredentials] = useState<i_loginCredentials>({\n    username: \"\",\n    password: \"\",\n   isAuthenticated: false\n  });\n  const [authUserContext, setAuthUserContext] = useContext(UserContext);\n\n  const signIn = () => {\n    setLoginCredentials({ ...loginCredentials, isAuthenticated: true })\n    localStorage.setItem(\n      \"user\",\n      loginCredentials.username\n    ); /* användarnamnet sparas inne i webläsaren */\n    setAuthUserContext(\n      loginCredentials\n    ); /* alla värden i logincredentials sparas i ett globalt värde */\n    history.push(RoutingPath.homeView); /* vi flyttas tillbaka till home-view */\n  };\n\n\n  return (\n    <div>\n      {/* <h1>{loginCredentials.username}</h1> */}\n      <h1>Logga in här om du vill.</h1>\n      <form>\n        <input\n          placeholder=\"username\"\n          onChange={(event) =>\n            setLoginCredentials({\n              ...loginCredentials,\n              username: event.target.value,\n            })\n          }\n        />{\" \"}\n        <br />\n        <input\n          placeholder=\"password\"\n          onChange={(event) =>\n            setLoginCredentials({\n              ...loginCredentials,\n              password: event.target.value,\n            })\n          }\n        />\n        <button onClick={() => signIn()}>Logga in</button>\n      </form>\n    </div>\n  );\n};\n","/home/novvea/GitHub/aterwinwin/client/src/view/authenticateduserviews/myprofileview/MyProfileView.tsx",["131"],"import './MyProfileView.css'\nimport {useContext} from 'react'\nimport {CardContext} from '../../../shared/provider/CardProvider'\n\nexport const MyProfileView = () => {\n\n  const {likedPicturesContext, setLikedPicturesContext} = useContext<any>(CardContext)\n  console.log('In mu profileview: likedPicturesContext', likedPicturesContext)\n\n  const displayLikedPicturesIfThereAreAny = () => {\n    return likedPicturesContext.length > 0\n    ?\n    <>\n      <h2>Jag har gillat följande bilder:</h2>\n      <ul className='likedPictures'>\n        {likedPicturesContext.map((pic:string) => <li><img key={pic} src={pic} alt='Product'/></li>)}\n      </ul>\n    </>\n  :\n    <h2>Du har ännu inte gillat några bilder</h2>\n  }\n\n  return(\n    <div>\n      <h1>Detta är min profilsida</h1>\n      {displayLikedPicturesIfThereAreAny()}\n\n      <ul>\n        <li>Lägg till info om användaren</li>\n        <li>Visa upplagda föremål</li>\n        <li>Visa gillade och supergillade föremål</li>\n        <li>Visa önskelistan</li>\n      </ul>\n    </div>\n  )\n}","/home/novvea/GitHub/aterwinwin/client/src/components/profile/Profile.tsx",[],"/home/novvea/GitHub/aterwinwin/client/src/components/navigation/mobilenavigation/sidebar/SideBar.tsx",[],"/home/novvea/GitHub/aterwinwin/client/src/components/search/Search.tsx",[],"/home/novvea/GitHub/aterwinwin/client/src/components/productcards/ProductCards.tsx",["132"],"import './ProductCards.css'\nimport { useState, useEffect, useContext } from 'react'\nimport axios from 'axios'\nimport { CardContext } from '../../shared/provider/CardProvider'\n\n\nexport const ProductCards = () => {\n  const [picsumData, setPicsumData] = useState<any>()\n  const {indexContext, setIndexContext} = useContext<any>(CardContext)\n  const {likedPicturesContext, setLikedPicturesContext} = useContext<any>(CardContext)\n  \n  const getDataFromPicsumAPI = async () => {\n    try {\n      const serverResponse = await axios.get('https://picsum.photos/v2/list')\n      setPicsumData(serverResponse.data[indexContext].download_url)\n    } catch (error) {\n      console.log(error)\n    }\n  } \n\n  useEffect(() => {\n    getDataFromPicsumAPI()\n  }, [indexContext])\n\n  const addCountOnButtonClick = () => {\n    setIndexContext(indexContext + 1)\n  }\n  console.log('utanför likedPicturesContext:', likedPicturesContext)\n  const likeAndAddCountOnButtonClick = () => {\n    setIndexContext(indexContext + 1)\n    console.log('innanför likedPicturesContext:', likedPicturesContext)\n    setLikedPicturesContext([...likedPicturesContext, picsumData])\n  }\n\n  return (\n    <div className='productCardWrapper'>\n      <h1>Produkt av typen blabla med id {indexContext}</h1>\n      <img className='imgPicsum' src={picsumData} alt='A randome produkt taken from the API'/>\n      <div className='decisionButtonWrapper'>\n        <button onClick={() => addCountOnButtonClick()}>Nej tack!</button>\n        <button onClick={() => likeAndAddCountOnButtonClick()}>Mer än bara gillar, vill absolut ha!!!!</button>\n        <button onClick={() => likeAndAddCountOnButtonClick()}> Gillar't </button>\n      </div>\n    </div>\n  )\n}\n","/home/novvea/GitHub/aterwinwin/client/src/components/backdrop/BackDrop.tsx",[],"/home/novvea/GitHub/aterwinwin/client/src/components/navigation/mobilenavigation/hamburgerbutton/HamburgerButton.tsx",[],"/home/novvea/GitHub/aterwinwin/client/src/components/profile/profiledropdown/ProfileDropDown.tsx",["133"],"import \"./ProfileDropDown.css\";\nimport { useContext } from \"react\";\nimport { UserContext } from \"../../../shared/provider/UserProvider\";\nimport { Link } from 'react-router-dom'\nimport RoutingPath from '../../../routes/RoutingPath'\n\nexport const ProfileDropDown = () => {\n  const [authUserContext, setAuthUserContext] = useContext(UserContext);\n\n  const logOut = () => {\n    setAuthUserContext(false);\n    localStorage.removeItem('user')\n  }\n\n  return (\n    <div className=\"profileDropDown\">\n      <Link to={RoutingPath.myProfileView}>Min profil</Link>\n      <button>Lägg upp vara</button>\n      <button>Skapa önskelista</button>\n      <Link to={RoutingPath.settingsView}>Inställningar</Link>\n      <Link to={RoutingPath.homeView} onClick={() => logOut()}>Logga ut</Link>\n    </div>\n  );\n};\n","/home/novvea/GitHub/aterwinwin/client/src/shared/api/service/BackendAPIService.ts",["134"],"/home/novvea/GitHub/aterwinwin/client/src/shared/api/BackendAPI.ts",[],{"ruleId":"135","replacedBy":"136"},{"ruleId":"137","replacedBy":"138"},{"ruleId":"139","severity":1,"message":"140","line":26,"column":6,"nodeType":"141","endLine":26,"endColumn":8,"suggestions":"142"},{"ruleId":"143","severity":1,"message":"144","line":1,"column":35,"nodeType":"145","messageId":"146","endLine":1,"endColumn":45},{"ruleId":"143","severity":1,"message":"144","line":1,"column":35,"nodeType":"145","messageId":"146","endLine":1,"endColumn":45},{"ruleId":"143","severity":1,"message":"147","line":10,"column":9,"nodeType":"145","messageId":"146","endLine":10,"endColumn":16},{"ruleId":"143","severity":1,"message":"148","line":11,"column":27,"nodeType":"145","messageId":"146","endLine":11,"endColumn":45},{"ruleId":"143","severity":1,"message":"148","line":12,"column":27,"nodeType":"145","messageId":"146","endLine":12,"endColumn":45},{"ruleId":"143","severity":1,"message":"149","line":10,"column":10,"nodeType":"145","messageId":"146","endLine":10,"endColumn":25},{"ruleId":"143","severity":1,"message":"149","line":14,"column":10,"nodeType":"145","messageId":"146","endLine":14,"endColumn":25},{"ruleId":"143","severity":1,"message":"150","line":7,"column":32,"nodeType":"145","messageId":"146","endLine":7,"endColumn":55},{"ruleId":"139","severity":1,"message":"151","line":23,"column":6,"nodeType":"141","endLine":23,"endColumn":20,"suggestions":"152"},{"ruleId":"143","severity":1,"message":"149","line":8,"column":10,"nodeType":"145","messageId":"146","endLine":8,"endColumn":25},{"ruleId":"153","severity":1,"message":"154","line":12,"column":1,"nodeType":"155","endLine":15,"endColumn":2},"no-native-reassign",["156"],"no-negated-in-lhs",["157"],"react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'setAuthUserContext'. Either include it or remove the dependency array.","ArrayExpression",["158"],"@typescript-eslint/no-unused-vars","'ReactChild' is defined but never used.","Identifier","unusedVar","'history' is assigned a value but never used.","'setAuthUserContext' is assigned a value but never used.","'authUserContext' is assigned a value but never used.","'setLikedPicturesContext' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'getDataFromPicsumAPI'. Either include it or remove the dependency array.",["159"],"import/no-anonymous-default-export","Assign object to a variable before exporting as module default","ExportDefaultDeclaration","no-global-assign","no-unsafe-negation",{"desc":"160","fix":"161"},{"desc":"162","fix":"163"},"Update the dependencies array to be: [setAuthUserContext]",{"range":"164","text":"165"},"Update the dependencies array to be: [getDataFromPicsumAPI, indexContext]",{"range":"166","text":"167"},[1164,1166],"[setAuthUserContext]",[740,754],"[getDataFromPicsumAPI, indexContext]"]